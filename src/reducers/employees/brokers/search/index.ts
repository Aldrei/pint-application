import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { employeesService } from '../../../../services/employees';
import { RootState } from '../../../../stores';

import { 
  IServiceError,
  IEmployeeDataSearchResult,
  IEmployeeData
} from '../../../../types';

import { IEmployeeSearchServiceRequest } from '../../search';

const initialState: IEmployeeSearchServiceRequest = {
  name: 'employeesBrokersSearchReducer',
  status: 'idle',
  employeeBrokerSelected: [],
};

export const employeesBrokersSearchThunk = createAsyncThunk(
  'employees/brokers/search',
  async (search: string) => {
    const response = await employeesService.search(search);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const employeesSearchSlice = createSlice({
  name: 'employeesBrokersSearchReducer',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSelectedEmployeeBroker: (state, action: PayloadAction<IEmployeeData[]>) => {
      console.log('DEBUG update action.payload:', action.payload);
      state.employeeBrokerSelected = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(employeesBrokersSearchThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(employeesBrokersSearchThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data as IEmployeeDataSearchResult;
      })
      .addCase(employeesBrokersSearchThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const { setSelectedEmployeeBroker } = employeesSearchSlice.actions;

export const selectEmployeesSearchReducer = (state: RootState) => state.employeesBrokersSearchReducer;

export default employeesSearchSlice.reducer;
