import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { employeesService } from '../../../../services/employees';
import { RootState } from '../../../../stores';

import { 
  IServiceError,
  IEmployeeDataSearchResult
} from '../../../../types';

import { IEmployeeSearchServiceRequest } from '../../search';

const initialState: IEmployeeSearchServiceRequest = {
  name: 'employeesAgentsSearchReducer',
  status: 'idle',
};

export const employeesAgentsSearchThunk = createAsyncThunk(
  'employees/agents/search',
  async (search: string) => {
    const response = await employeesService.search(search);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const employeesSearchSlice = createSlice({
  name: 'employeesAgentsSearchReducer',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(employeesAgentsSearchThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(employeesAgentsSearchThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data as IEmployeeDataSearchResult;
      })
      .addCase(employeesAgentsSearchThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const selectEmployeesAgentsSearchReducer = (state: RootState) => state.employeesAgentsSearchReducer;

export default employeesSearchSlice.reducer;
