import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { employeesService } from '../../../services/employees';
import { RootState } from '../../../stores';

import { IServiceRequest, IEmployeesServiceThunk } from '../../../types';

const initialState: IServiceRequest = {
  name: 'employeesListReducer',
  status: 'idle',
};

export const employeesServiceThunk = createAsyncThunk(
  'employees/list',
  async ({ page }: IEmployeesServiceThunk) => {
    const response = await employeesService.list({ page });
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const employeesListSlice = createSlice({
  name: 'employees-list',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(employeesServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(employeesServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(employeesServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as object;
      });
  },
});

export const selectEmployeesListReducer = (state: RootState) => state.employeesListReducer;

export default employeesListSlice.reducer;
