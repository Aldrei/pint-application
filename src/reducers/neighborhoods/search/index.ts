import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { neighborhoodsService } from '../../../services/neighborhoods';
import { RootState, AppThunk } from '../../../stores';

import { 
  IServiceRequest, 
  IServiceError,
  INeighborhoodDataSearchResult
} from '../../../types';

export interface INeighborhoodsSearchServiceRequest extends IServiceRequest {
  data?: INeighborhoodDataSearchResult | IServiceError;
}

const initialState: INeighborhoodsSearchServiceRequest = {
  name: 'neighborhoodsSearchReducer',
  status: 'idle',
};

interface INeighborhoodsServiceSearchParams {
  search: string;
  cityId: string;
}

export const neighborhoodsSearchThunk = createAsyncThunk(
  'neighborhoods/search',
  async (params: INeighborhoodsServiceSearchParams) => {
    const response = await neighborhoodsService.search({ ...params });
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const neighborhoodsSearchSlice = createSlice({
  name: 'neighborhoodsSearchReducer',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: async (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(neighborhoodsSearchThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(neighborhoodsSearchThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data as INeighborhoodDataSearchResult;
      })
      .addCase(neighborhoodsSearchThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

// export const { incrementByAmount } = neighborhoodsSearchSlice.actions;

export const selectNeighborhoodsSearchReducer = (state: RootState) => state.neighborhoodsSearchReducer;

export const neighborhoodsSearchThunkDispatch =
  (search: string, cityId: string): AppThunk => (
    dispatch, 
    // getState
  ) => {
    dispatch(neighborhoodsSearchThunk({ search, cityId }));
  };

export default neighborhoodsSearchSlice.reducer;
