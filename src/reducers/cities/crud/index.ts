import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { resolveCityStorePayload } from '../../../helpers';
import { citiesService } from '../../../services/cities';
import { RootState } from '../../../stores';

import { IServiceRequestTemp, IPaginationServiceThunk, ICityData, IServiceRequestStatus } from '../../../types';

const initialState: IServiceRequestTemp = {
  name: 'citiesListReducer',
  status: 'idle',
  crud: {
    create: {
      name: 'citiesCreateReducer',
      status: 'idle',
    },
    read: {
      name: 'citiesReadReducer',
      status: 'idle',
    },
    update: {
      name: 'citiesUpdateReducer',
      status: 'idle',
    },
    delete: {
      name: 'citiesDeleteReducer',
      status: 'idle',
    },
  }
};

export const citiesServiceThunk = createAsyncThunk(
  'cities/list',
  async ({ page }: IPaginationServiceThunk) => {
    const response = await citiesService.list({ page });
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const citiesStoreThunk = createAsyncThunk(
  'cities/store',
  async (dataStore: ICityData) => {
    const response = await citiesService.store(resolveCityStorePayload(dataStore));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const citiesUpdateThunk = createAsyncThunk(
  'cities/update',
  async (dataStore: ICityData) => {
    const response = await citiesService.update(String(dataStore.id), resolveCityStorePayload(dataStore));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const citiesDeleteThunk = createAsyncThunk(
  'cities/delete',
  async (dataUpdate: ICityData) => {
    const response = await citiesService.delete(String(dataUpdate.id));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const citiesShowThunk = createAsyncThunk(
  'cities/show',
  async (id: string) => {
    const response = await citiesService.show(id);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const citiesListSlice = createSlice({
  name: 'cities-list',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStatusStore: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.crud.create.status = action.payload;
    },
    setStatusUpdate: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.crud.update.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Start List Action */
      .addCase(citiesServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(citiesServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(citiesServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.crud.create.data = action.payload as object;
      })
      /** End List Action */
      /** Start Store Action */
      .addCase(citiesStoreThunk.pending, (state) => {
        state.crud.create.status = 'loading';
      })
      .addCase(citiesStoreThunk.fulfilled, (state, action) => {
        state.crud.create.status = 'success';
        state.crud.create.data = action.payload.data;
      })
      .addCase(citiesStoreThunk.rejected, (state, action) => {
        state.crud.create.status = 'failed';
        state.crud.create.data = action.payload as object;
      })
      /** End Store Action */
      /** Start Update Action */
      .addCase(citiesUpdateThunk.pending, (state) => {
        state.crud.update.status = 'loading';
      })
      .addCase(citiesUpdateThunk.fulfilled, (state, action) => {
        state.crud.update.status = 'success';
        state.crud.update.data = action.payload.data;
      })
      .addCase(citiesUpdateThunk.rejected, (state, action) => {
        state.crud.update.status = 'failed';
        state.crud.update.data = action.payload as object;
      })
      /** End Update Action */
      /** Start Delete Action */
      .addCase(citiesDeleteThunk.pending, (state) => {
        state.crud.delete.status = 'loading';
      })
      .addCase(citiesDeleteThunk.fulfilled, (state, action) => {
        state.crud.delete.status = 'success';
        state.crud.delete.data = action.payload.data;
      })
      .addCase(citiesDeleteThunk.rejected, (state, action) => {
        state.crud.delete.status = 'failed';
        state.crud.delete.data = action.payload as object;
      })
      /** End Delete Action */
      /** Start Show Action */
      .addCase(citiesShowThunk.pending, (state) => {
        state.crud.read.status = 'loading';
      })
      .addCase(citiesShowThunk.fulfilled, (state, action) => {
        state.crud.read.status = 'success';
        state.crud.read.data = action.payload.data;
      })
      .addCase(citiesShowThunk.rejected, (state, action) => {
        state.crud.read.status = 'failed';
        state.crud.read.data = action.payload as object;
      });
  },
});

export const { setStatusStore, setStatusUpdate } = citiesListSlice.actions;

export const selectCitiesListReducer = (state: RootState) => state.citiesListReducer;

export default citiesListSlice.reducer;
