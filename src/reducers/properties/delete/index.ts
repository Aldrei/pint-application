import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { propertiesService } from '../../../services/properties';
import { RootState } from '../../../stores';

import { 
  IServiceRequest, 
  IServiceError, 
  IServiceRequestStatus
} from '../../../types';

const initialState: IServiceRequest = {
  name: 'propertiesDeleteReducer',
  status: 'idle',
};

export const propertiesDeleteThunk = createAsyncThunk(
  'properties/delete',
  async (code: string) => {
    const response = await propertiesService.delete(code);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesDeleteSlice = createSlice({
  name: 'properties-delete',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStatus: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesDeleteThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesDeleteThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(propertiesDeleteThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const { setStatus } = propertiesDeleteSlice.actions;

export const selectPropertiesDeleteReducer = (state: RootState) => state.propertiesDeleteReducer;

export default propertiesDeleteSlice.reducer;
