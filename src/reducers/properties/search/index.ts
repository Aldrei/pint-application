import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { propertiesService } from '../../../services/properties';
import { RootState } from '../../../stores';

import { 
  IServiceRequest,
  IServiceError 
} from '../../../types';

const initialState: IServiceRequest = {
  name: 'propertiesSearchReducer',
  status: 'idle',
};

export const propertiesSearchThunk = createAsyncThunk(
  'properties/search',
  async (search: string) => {
    const response = await propertiesService.search(search);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesSearchSlice = createSlice({
  name: 'properties-search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesSearchThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesSearchThunk.fulfilled, (state, action) => {
        state.status = 'success';
        console.log('DEBUG action.payload:', action.payload);
        state.data = action.payload.data as IServiceRequest;
      })
      .addCase(propertiesSearchThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const selectPropertiesSearchReducer = (state: RootState) => state.propertiesSearchReducer;

export default propertiesSearchSlice.reducer;
