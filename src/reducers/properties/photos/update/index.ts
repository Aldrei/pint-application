import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { propertiesPhotosService } from '../../../../services/properties';
import { RootState } from '../../../../stores';

import { IServiceRequest, IPaginateDefault, IServiceError, IPhotoUpdatePayload } from '../../../../types';

export interface IPropertiesPhotosUpdateServiceRequest extends IServiceRequest {
  data?: IPaginateDefault | IServiceError
}

const initialState: IPropertiesPhotosUpdateServiceRequest = {
  name: 'propertiesPhotosUpdateReducer',
  status: 'idle',
};

export interface IPropertiesPhotosUpdateThunk {
  code: string;
  photoId: string;
  data: IPhotoUpdatePayload;
}

export const propertiesPhotosUpdateThunk = createAsyncThunk(
  'properties/photos-update',
  async ({ code, photoId, data }: IPropertiesPhotosUpdateThunk) => {
    const response = await propertiesPhotosService.update(code, photoId, data);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesPhotosUpdateSlice = createSlice({
  name: 'properties-photos-update',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesPhotosUpdateThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesPhotosUpdateThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(propertiesPhotosUpdateThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const selectPropertiesPhotosUpdateReducer = (state: RootState) => state.propertiesPhotosUpdateReducer;

export default propertiesPhotosUpdateSlice.reducer;
