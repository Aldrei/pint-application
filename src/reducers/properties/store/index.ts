import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { propertiesService } from '../../../services/properties';
import { RootState } from '../../../stores';

import { 
  IServiceRequest, 
  IPropertyShow, 
  IServiceError,
  IServiceFieldsRequired,
  IPropertyStorePayload
} from '../../../types';

export interface IPropertiesStoreServiceRequest extends IServiceRequest {
  data?: IPropertyShow | IServiceFieldsRequired | IServiceError;
}

const initialState: IPropertiesStoreServiceRequest = {
  name: 'propertiesStoreReducer',
  status: 'idle',
};

export const propertiesStoreThunk = createAsyncThunk(
  'properties/store',
  async (dataStore: IPropertyStorePayload) => {
    const response = await propertiesService.store(dataStore);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesStoreSlice = createSlice({
  name: 'properties-store',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesStoreThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesStoreThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data as IPropertyShow;
      })
      .addCase(propertiesStoreThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const selectPropertiesStoreReducer = (state: RootState) => state.propertiesStoreReducer;

export default propertiesStoreSlice.reducer;
