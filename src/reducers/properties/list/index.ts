import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { propertiesService } from '../../../services/properties';
import { RootState } from '../../../stores';

import { IServiceRequest } from '../../../types';

// export interface IAutyState extends IServiceRequest {
//   whoIsAuth: object;
//   accessToken: IAuthServiceAccessTokenResponse;
// }

const initialState: IServiceRequest = {
  status: 'idle',
};

export const propertiesServiceThunk = createAsyncThunk(
  'properties/list',
  async (page: number) => {
    const response = await propertiesService.list(page);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesListSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(propertiesServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as object;
      });
  },
});

export const selectPropertiesListReducer = (state: RootState) => state.propertiesListReducer;

export default propertiesListSlice.reducer;
