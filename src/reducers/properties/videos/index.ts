import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { propertiesVideosService } from '../../../services/properties';
import { RootState } from '../../../stores';

import { IServiceRequest, IPaginateDefault, IServiceError } from '../../../types';

export interface IPropertiesVideosServiceRequest extends IServiceRequest {
  data?: IPaginateDefault | IServiceError
}

const initialState: IPropertiesVideosServiceRequest = {
  name: 'propertiesVideosReducer',
  status: 'idle',
};

export const propertiesVideosThunk = createAsyncThunk(
  'properties/videos',
  async (code: string) => {
    const response = await propertiesVideosService.list(code);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesVideosSlice = createSlice({
  name: 'properties-videos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesVideosThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesVideosThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(propertiesVideosThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const selectPropertiesVideosReducer = (state: RootState) => state.propertiesVideosReducer;

export default propertiesVideosSlice.reducer;
