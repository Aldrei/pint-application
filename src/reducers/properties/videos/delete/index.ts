import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { propertiesVideosService } from '../../../../services/properties';
import { RootState } from '../../../../stores';

import { IServiceRequest, IServiceError, IServiceSuccess, IServiceRequestStatus } from '../../../../types';

export interface IPropertiesVideosDeleteServiceRequest extends IServiceRequest {
  data?: IServiceSuccess | IServiceError
}

const initialState: IPropertiesVideosDeleteServiceRequest = {
  name: 'propertiesVideosDeleteReducer',
  status: 'idle',
};

export interface IPropertiesVideosDeleteThunk {
  code: string;
  videoId: string;
}

export const propertiesVideosDeleteThunk = createAsyncThunk(
  'properties/videos-delete',
  async ({ code, videoId }: IPropertiesVideosDeleteThunk) => {
    const response = await propertiesVideosService.delete(code, videoId);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesVideosDeleteSlice = createSlice({
  name: 'properties-videos-delete',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setVideoDeleteStatus: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesVideosDeleteThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesVideosDeleteThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(propertiesVideosDeleteThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const { setVideoDeleteStatus } = propertiesVideosDeleteSlice.actions;

export const selectPropertiesVideosDeleteReducer = (state: RootState) => state.propertiesVideosDeleteReducer;

export default propertiesVideosDeleteSlice.reducer;
