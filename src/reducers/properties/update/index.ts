import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { propertiesService } from '../../../services/properties';
import { RootState } from '../../../stores';

import { resolvePropertyUpdatePayload } from '../../../helpers';

import { 
  IServiceRequest, 
  IPropertyShow, 
  IServiceError,
  IServiceFieldsRequired,
  IPropertyData,
  IServiceRequestStatus,
} from '../../../types';

export interface IPropertiesUpdateServiceRequest extends IServiceRequest {
  data?: IPropertyShow | IServiceFieldsRequired | IServiceError;
}

const initialState: IPropertiesUpdateServiceRequest = {
  name: 'propertiesUpdateReducer',
  status: 'idle',
};

export const propertiesUpdateThunk = createAsyncThunk(
  'properties/update',
  async (dataUpdate: IPropertyData) => {
    const response = await propertiesService.update(String(dataUpdate.id), resolvePropertyUpdatePayload(dataUpdate));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const propertiesUpdateSlice = createSlice({
  name: 'properties-update',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStatus: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(propertiesUpdateThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(propertiesUpdateThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data as IPropertyShow;
      })
      .addCase(propertiesUpdateThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as IServiceError;
      });
  },
});

export const { setStatus } = propertiesUpdateSlice.actions;

export const selectPropertiesUpdateReducer = (state: RootState) => state.propertiesUpdateReducer;

export default propertiesUpdateSlice.reducer;
