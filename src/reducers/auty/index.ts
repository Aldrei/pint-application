import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { authService, IAuthServiceAccessTokenRequest, IAuthServiceAccessTokenResponse, IAuthServiceRevokeRequest } from '../../services/auth';
import { AppThunk } from '../../stores';

import { IServiceRequest, IWhoIsAuth } from '../../types';

export interface IAutyState extends IServiceRequest {
  whoIsAuth: IWhoIsAuth;
  accessToken: IAuthServiceAccessTokenResponse;
}

const initialState: IAutyState = {
  name: 'authReducer',
  status: 'idle',
  whoIsAuth: {} as IWhoIsAuth,
  accessToken: {} as IAuthServiceAccessTokenResponse,
};

export const authServiceThunk = createAsyncThunk(
  'auth/access_token',
  async (data: IAuthServiceAccessTokenRequest) => {
    const response = await authService.accessToken(data);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const revokeServiceThunk = createAsyncThunk(
  'auth/revoke',
  async (data: IAuthServiceRevokeRequest) => {
    const response = await authService.revoke(data);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const whoServiceThunk = createAsyncThunk(
  'auth/who_is_auth',
  async () => {
    const response = await authService.who();
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearAccessToken: (state) => {
      state.accessToken = {} as IAuthServiceAccessTokenResponse;
      state.whoIsAuth = {} as IWhoIsAuth;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Access token */
      .addCase(authServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(authServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.accessToken = action.payload?.data?.access_token ? action.payload.data : {};
        state.data = action.payload.data;
      })
      .addCase(authServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as object;
        state.accessToken = {};
      })
      /** Revoke. */
      .addCase(revokeServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(revokeServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
        state.accessToken = {};
        state.whoIsAuth = {} as IWhoIsAuth;
      })
      .addCase(revokeServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as object;
      })
      /** Who is auth. */
      .addCase(whoServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(whoServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.whoIsAuth = action.payload.data;
      })
      .addCase(whoServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.whoIsAuth = action.payload as IWhoIsAuth;
      });
  },
});

const { clearAccessToken } = authSlice.actions;

export const clearAccessTokenReducer = (): AppThunk => (dispatch) => {
  dispatch(clearAccessToken());
};

export default authSlice.reducer;
