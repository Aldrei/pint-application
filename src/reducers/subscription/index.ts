import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { ISubscriptionPaymentIntentResponse, ISubscriptionPaymentIntentServiceRequest, ISubscriptionPaymentResponse, ISubscriptionPaymentServiceRequest, subscriptionService } from '../../services/subscription';

import { IServiceRequest, IServiceRequestStatus } from '../../types';

export interface IPayment {
  id?: number;
  subscription_id: number;
  payment_category_id: number;
  client_id: number;
  stripe_code_payment: string;
  amount: number | null;
  description: string;
  quantity: number | null;
  reference_date: Date | null;
  paid_at: Date | null;
  created_at?: Date;
  updated_at?: Date;
}

export interface ISubscriptionState extends IServiceRequest {
  payment: ISubscriptionPaymentResponse;
  paymentIntent: ISubscriptionPaymentIntentResponse;
  statusIntent: IServiceRequestStatus;
  availablePayments: IPayment[];
  availablePaymentsStatus: IServiceRequestStatus;
}

const initialState: ISubscriptionState = {
  name: 'subscriptionReducer',
  status: 'idle',
  statusIntent: 'idle',
  payment: {} as ISubscriptionPaymentResponse,
  paymentIntent: {} as ISubscriptionPaymentIntentResponse,
  availablePayments: [],
  availablePaymentsStatus: 'idle',
};

export const availablePaymentsServiceThunk = createAsyncThunk(
  'subscription/availablePayments',
  async () => {
    const response = await subscriptionService.availablePayments();
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const subscriptionPaymentServiceThunk = createAsyncThunk(
  'subscription/payment',
  async ({ stripe, cardElement, clientSecret, billingDetails, paymentIntentId, paymentAvailableId }: ISubscriptionPaymentServiceRequest) => {
    let status: 'success' | 'pending' = 'pending';
    let error = '';

    /**
     * Call PUT /api/payments/:paymentAvailableId to set paymentIntentId in the payment register.
    */
    const paymentAvailableIntentResponse = await subscriptionService.setPaymentAvailableIntent(String(paymentAvailableId), { paymentIntentId });

    const { data: paymentAvailableIntent } = paymentAvailableIntentResponse;

    console.log('[REDUCER] paymentAvailableIntent', paymentAvailableIntent);
    

    /**
     * TODO: To treat that flow... in Subscription page.
    */
    if (paymentAvailableIntent?.data?.stripe_code_payment !== paymentIntentId) {
      error = 'Algo de errado ao sincronizar a intenção de pagamento da Stripe com a API';
      return { status, error }; // Status 'pending'.
    }

    // IF PUT /api/payments/:paymentAvailableId returned success call Stripe confirmCardPayment
    const response = await stripe?.confirmCardPayment(clientSecret || '', {
      payment_method: {
        card: cardElement || { token: '' },
        billing_details: {
          name: billingDetails?.name,
        },
      },
    }) || { error: '', paymentIntent: '' };

    console.log('[REDUCER] STRIPE response', response);

    /**
     *  Call PUT /api/payments/:paymentAvailableId to set paid_at date.
     */
    if (
      response?.paymentIntent?.id === paymentIntentId
      && response?.paymentIntent?.status === 'succeeded'
    ) {
      // IF PUT /api/payments/:paymentAvailableId returned success set status success to UI notify the user.
      const paymentAvailableIntentConfirmResponse = await subscriptionService.setPaymentAvailableIntentConfirm(String(paymentAvailableId), { paymentIntentId });

      const { data: paymentAvailableIntentConfirm } = paymentAvailableIntentConfirmResponse;

      console.log('[REDUCER] paymentAvailableIntentConfirm', paymentAvailableIntentConfirm);

      if (paymentAvailableIntentConfirm?.data?.paid_at && paymentAvailableIntentConfirm?.data?.stripe_code_payment === paymentIntentId)
        status = 'success';
      else
        error = 'Algo de errado ao finalizar o pagamento Stripe > API.';
    } else {
      error = 'Algo de errado ao confirmar o pagamento com a Stripe';
    }

    /**
     * TODO:
     *    
     *    User must be notify about the status, friendly!
     *    But the Imob Admin Clients should track that "pending" payments to fix, because String processed tha payment, customer paid!
    */

    return { ...response, error };
  }
);

export const subscriptionPaymentIntentServiceThunk = createAsyncThunk(
  'subscription/paymentIntent',
  async (data: ISubscriptionPaymentIntentServiceRequest) => {
    const response = await subscriptionService.paymentIntent(data);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const subscriptionSlice = createSlice({
  name: 'subscription',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Confirm Payment */
      .addCase(subscriptionPaymentServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(subscriptionPaymentServiceThunk.fulfilled, (state, action) => {
        console.log('REDUCER FULFILLED... RESPONSE:', action.payload);

        const dataResponse = action.payload as any;

        if (dataResponse.error) state.status = 'failed';
        else state.status = 'success';

        state.payment = action.payload;
      })
      .addCase(subscriptionPaymentServiceThunk.rejected, (state, action) => {
        console.log('REDUCER REJECTED... RESPONSE:', action.payload);
        state.status = 'failed';
        state.payment = action.payload as object;
      })
      /** Intent Payment */
      .addCase(subscriptionPaymentIntentServiceThunk.pending, (state) => {
        state.statusIntent = 'loading';
      })
      .addCase(subscriptionPaymentIntentServiceThunk.fulfilled, (state, action) => {
        state.statusIntent = 'success';
        state.paymentIntent = action.payload.data;
      })
      .addCase(subscriptionPaymentIntentServiceThunk.rejected, (state, action) => {
        state.statusIntent = 'failed';
        state.paymentIntent = action.payload as object;
      })
      /** Available Payments */
      .addCase(availablePaymentsServiceThunk.pending, (state) => {
        state.availablePaymentsStatus = 'loading';
      })
      .addCase(availablePaymentsServiceThunk.fulfilled, (state, action) => {
        state.availablePaymentsStatus = 'success';
        state.availablePayments = action.payload.data.data;
      })
      .addCase(availablePaymentsServiceThunk.rejected, (state, action) => {
        state.availablePaymentsStatus = 'failed';
        state.availablePayments = [];
      });
  },
});

export default subscriptionSlice.reducer;
