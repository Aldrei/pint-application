import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { ISubscriptionPaymentIntentResponse, ISubscriptionPaymentResponse, ISubscriptionPaymentServiceRequest, subscriptionService } from '../../services/subscription';

import { IServiceRequest, IServiceRequestStatus } from '../../types';

export interface ISubscriptionState extends IServiceRequest {
  payment: ISubscriptionPaymentResponse;
  paymentIntent: ISubscriptionPaymentIntentResponse;
  statusIntent: IServiceRequestStatus;
}

const initialState: ISubscriptionState = {
  name: 'subscriptionReducer',
  status: 'idle',
  statusIntent: 'idle',
  payment: {} as ISubscriptionPaymentResponse,
  paymentIntent: {} as ISubscriptionPaymentIntentResponse
};

export const subscriptionPaymentServiceThunk = createAsyncThunk(
  'subscription/payment',
  async (data: ISubscriptionPaymentServiceRequest) => {
    const response = await subscriptionService.payment(data);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const subscriptionPaymentIntentServiceThunk = createAsyncThunk(
  'subscription/paymentIntent',
  async (data: ISubscriptionPaymentServiceRequest) => {
    const response = await subscriptionService.paymentIntent(data);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const subscriptionSlice = createSlice({
  name: 'subscription',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Confirm Payment */
      .addCase(subscriptionPaymentServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(subscriptionPaymentServiceThunk.fulfilled, (state, action) => {
        console.log('DEBUG action.payload:', action.payload);
        state.status = 'success';
        state.payment = action.payload.data;
      })
      .addCase(subscriptionPaymentServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.data = action.payload as object;
        state.payment = {};
      })
      /** Intent Payment */
      .addCase(subscriptionPaymentIntentServiceThunk.pending, (state) => {
        state.statusIntent = 'loading';
      })
      .addCase(subscriptionPaymentIntentServiceThunk.fulfilled, (state, action) => {
        console.log('DEBUG action.payload:', action.payload);
        state.statusIntent = 'success';
        state.paymentIntent = action.payload.data;
      })
      .addCase(subscriptionPaymentIntentServiceThunk.rejected, (state, action) => {
        state.statusIntent = 'failed';
        state.data = action.payload as object;
        state.payment = {};
      });
  },
});

export default subscriptionSlice.reducer;
