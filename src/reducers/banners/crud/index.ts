import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { resolveBannerStorePayload } from '../../../helpers';
import { bannersService } from '../../../services/banners';
import { RootState } from '../../../stores';

import { IBannerData, IBannersServiceThunk, IBannerUpdatePositionsPayload, IServiceRequestStatus, IServiceRequestTemp } from '../../../types';

const initialState: IServiceRequestTemp = {
  name: 'bannersListReducer',
  status: 'idle',
  crud: {
    create: {
      name: 'bannersCreateReducer',
      status: 'idle',
    },
    read: {
      name: 'bannersReadReducer',
      status: 'idle',
    },
    update: {
      name: 'bannersUpdateReducer',
      status: 'idle',
    },
    delete: {
      name: 'bannersDeleteReducer',
      status: 'idle',
    },
  }
};

export const bannersServiceThunk = createAsyncThunk(
  'banners/list',
  async ({ page }: IBannersServiceThunk) => {
    const response = await bannersService.list({ page });
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const bannersStoreThunk = createAsyncThunk(
  'banners/store',
  async (dataStore: IBannerData) => {
    const response = await bannersService.store(resolveBannerStorePayload(dataStore));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const bannersUpdateThunk = createAsyncThunk(
  'banners/update',
  async (dataStore: IBannerData) => {
    const response = await bannersService.update(String(dataStore.id), resolveBannerStorePayload(dataStore));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const bannersDeleteThunk = createAsyncThunk(
  'banners/delete',
  async (dataUpdate: IBannerData) => {
    const response = await bannersService.delete(String(dataUpdate.id));
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const bannersShowThunk = createAsyncThunk(
  'banners/show',
  async (id: string) => {
    const response = await bannersService.show(id);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const bannersUpdatePositionsThunk = createAsyncThunk(
  'banners/update-positions',
  async (dataStore: IBannerUpdatePositionsPayload) => {
    const response = await bannersService.updatePositions(dataStore);
    // The value we return becomes the `fulfilled` action payload

    return response;
  }
);

export const bannersListSlice = createSlice({
  name: 'banners-list',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStatusStore: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.crud.create.status = action.payload;
    },
    setStatusUpdate: (state, action: PayloadAction<IServiceRequestStatus>) => {
      state.crud.update.status = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      /** Start List Action */
      .addCase(bannersServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(bannersServiceThunk.fulfilled, (state, action) => {
        state.status = 'success';
        state.data = action.payload.data;
      })
      .addCase(bannersServiceThunk.rejected, (state, action) => {
        state.status = 'failed';
        state.crud.create.data = action.payload as object;
      })
      /** End List Action */
      /** Start Store Action */
      .addCase(bannersStoreThunk.pending, (state) => {
        state.crud.create.status = 'loading';
      })
      .addCase(bannersStoreThunk.fulfilled, (state, action) => {
        state.crud.create.status = 'success';
        state.crud.create.data = action.payload.data;
      })
      .addCase(bannersStoreThunk.rejected, (state, action) => {
        state.crud.create.status = 'failed';
        state.crud.create.data = action.payload as object;
      })
      /** End Store Action */
      /** Start Update Action */
      .addCase(bannersUpdateThunk.pending, (state) => {
        state.crud.update.status = 'loading';
      })
      .addCase(bannersUpdateThunk.fulfilled, (state, action) => {
        state.crud.update.status = 'success';
        state.crud.update.data = action.payload.data;
      })
      .addCase(bannersUpdateThunk.rejected, (state, action) => {
        state.crud.update.status = 'failed';
        state.crud.update.data = action.payload as object;
      })
      /** End Update Action */
      /** Start Delete Action */
      .addCase(bannersDeleteThunk.pending, (state) => {
        state.crud.delete.status = 'loading';
      })
      .addCase(bannersDeleteThunk.fulfilled, (state, action) => {
        state.crud.delete.status = 'success';
        state.crud.delete.data = action.payload.data;
      })
      .addCase(bannersDeleteThunk.rejected, (state, action) => {
        state.crud.delete.status = 'failed';
        state.crud.delete.data = action.payload as object;
      })
      /** End Delete Action */
      /** Start Show Action */
      .addCase(bannersShowThunk.pending, (state) => {
        state.crud.read.status = 'loading';
      })
      .addCase(bannersShowThunk.fulfilled, (state, action) => {
        state.crud.read.status = 'success';
        state.crud.read.data = action.payload.data;
      })
      .addCase(bannersShowThunk.rejected, (state, action) => {
        state.crud.read.status = 'failed';
        state.crud.read.data = action.payload as object;
      })
      /** End Delete Action */
      /** Start Delete Action */
      .addCase(bannersUpdatePositionsThunk.pending, (state) => {
        state.crud.delete.status = 'loading';
      })
      .addCase(bannersUpdatePositionsThunk.fulfilled, (state, action) => {
        state.crud.delete.status = 'success';
        state.crud.delete.data = action.payload.data;
      })
      .addCase(bannersUpdatePositionsThunk.rejected, (state, action) => {
        state.crud.delete.status = 'failed';
        state.crud.delete.data = action.payload as object;
      });
  },
});

export const { setStatusStore, setStatusUpdate } = bannersListSlice.actions;

export const selectbannersCrudReducer = (state: RootState) => state.bannersCrudReducer;

export default bannersListSlice.reducer;
