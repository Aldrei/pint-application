import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { authService, IAuthServiceAccessTokenRequest, IAuthServiceAccessTokenResponse } from '../../services/auth';

import { IServiceRequest } from '../../types';

export interface IAutyState extends IServiceRequest {
  whoIsAuth: object;
  accessToken: IAuthServiceAccessTokenResponse;
}

const initialState: IAutyState = {
  status: 'idle',
  whoIsAuth: {},
  accessToken: {} as IAuthServiceAccessTokenResponse,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const authServiceThunk = createAsyncThunk(
  'counter/fetchCount',
  async (data: IAuthServiceAccessTokenRequest) => {
    const response = await authService.accessToken(data);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authServiceThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(authServiceThunk.fulfilled, (state, action) => {
        console.log('authServiceThunk fulfilled:', action);
        state.status = 'success';
        state.accessToken = action.payload?.data?.access_token ? action.payload.data : {};
        state.data = action.payload.data;
      })
      .addCase(authServiceThunk.rejected, (state, action) => {
        console.log('authServiceThunk rejected:', action);
        state.status = 'failed';
        state.data = action.payload as object;
        state.accessToken = {};
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

export default authSlice.reducer;
